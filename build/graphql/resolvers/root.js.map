{"version":3,"sources":["../../../src/graphql/resolvers/root.js"],"names":["order","id","Order","provider","FoodProvider","unit","Unit","user","User","orderEntry","OrderEntry","Subscription","fooder","subscribe","pubSub","asyncIterator","createFoodProvider","input","FoodProviderCrud","create","createUnit","UnitCrud","createOrderEntry","OrderEntryCrud","createOrder","OrderCrud","createUser","userCrud","updateFoodProvider","update"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;kBAQe;AACXA,WAAO,OAAO,EAACC,EAAD,EAAP,KAAgB;AACnB,eAAO,MAAM,IAAIC,eAAJ,CAAUD,EAAV,CAAb;AACH,KAHU;AAIXE,cAAU,OAAO;AACbF;AADa,KAAP,KAEJ;AACF,eAAO,MAAM,IAAIG,kBAAJ,CAAiBH,EAAjB,CAAb;AACH,KARU;AASXI,UAAM,OAAO;AACTJ;AADS,KAAP,KAEA;AACF,eAAO,MAAM,IAAIK,cAAJ,CAASL,EAAT,CAAb;AACH,KAbU;AAcXM,UAAM,OAAO;AACTN;AADS,KAAP,KAEA;AACF,eAAO,MAAM,IAAIO,cAAJ,CAASP,EAAT,CAAb;AACH,KAlBU;AAmBXQ,gBAAY,OAAO;AACfR;AADe,KAAP,KAEN;AACF,eAAO,MAAM,IAAIS,sBAAJ,CAAeT,EAAf,CAAb;AACH,KAvBU;AAwBXU,kBAAc;AACVC,gBAAQ;AACJC,uBAAW,MAAMC,iBAAOC,aAAP,CAAqB,kBAArB;AADb;AADE,KAxBH;AA6BXC,wBAAoB,OAAO,EAACC,KAAD,EAAP,KAAmB;AACnC,eAAO,MAAMC,uBAAiBC,MAAjB,CAAwBF,KAAxB,CAAb;AACH,KA/BU;AAgCXG,gBAAY,OAAO,EAACH,KAAD,EAAP,KAAmB;AAC3B,eAAO,MAAMI,eAASF,MAAT,CAAgBF,KAAhB,CAAb;AACH,KAlCU;AAmCXK,sBAAkB,OAAO,EAACL,KAAD,EAAP,KAAmB;AACjC,eAAO,MAAMM,qBAAeJ,MAAf,CAAsBF,KAAtB,CAAb;AACH,KArCU;AAsCXO,iBAAa,OAAO,EAACP,KAAD,EAAP,KAAmB;AAC5B,eAAO,MAAMQ,gBAAUN,MAAV,CAAiBF,KAAjB,CAAb;AACH,KAxCU;AAyCXS,gBAAY,OAAO,EAACT,KAAD,EAAP,KAAmB;AAC3B,eAAO,MAAMU,SAASR,MAAT,CAAgBF,KAAhB,CAAb;AACH,KA3CU;AA4CXW,wBAAoB,OAAO,EAACX,KAAD,EAAQhB,EAAR,EAAP,KAAqB;AACrC,eAAO,MAAMiB,uBAAiBW,MAAjB,CAAwBZ,KAAxB,EAA8BhB,EAA9B,CAAb;AACH;AA9CU,C","file":"root.js","sourcesContent":["import FoodProvider from './provider'\nimport Unit from './unit'\nimport OrderEntry from './orderEntries'\nimport Order from './order'\nimport User from './user'\nimport pubSub from '../pubsub'\nimport {\n    UserCrud,\n    FoodProviderCrud,\n    OrderCrud,\n    OrderEntryCrud,\n    UnitCrud\n} from '../../database/schemes/crud/crud'\n\nexport default {\n    order: async ({id}) => {\n        return await new Order(id);\n    },\n    provider: async ({\n        id\n    }) => {\n        return await new FoodProvider(id);\n    },\n    unit: async ({\n        id\n    }) => {\n        return await new Unit(id);\n    },\n    user: async ({\n        id\n    }) => {\n        return await new User(id);\n    },\n    orderEntry: async ({\n        id\n    }) => {\n        return await new OrderEntry(id);\n    },\n    Subscription: {\n        fooder: {\n            subscribe: () => pubSub.asyncIterator(\"PROVIDER_CHANGED\")\n        }\n    },\n    createFoodProvider: async ({input}) => {\n        return await FoodProviderCrud.create(input);\n    },\n    createUnit: async ({input}) => {\n        return await UnitCrud.create(input);\n    },\n    createOrderEntry: async ({input}) => {\n        return await OrderEntryCrud.create(input);\n    },\n    createOrder: async ({input}) => {\n        return await OrderCrud.create(input);\n    },\n    createUser: async ({input}) => {\n        return await userCrud.create(input);\n    },\n    updateFoodProvider: async ({input, id})=>{\n        return await FoodProviderCrud.update(input,id);        \n    }\n}"]}