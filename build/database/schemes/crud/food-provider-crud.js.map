{"version":3,"sources":["../../../../src/database/schemes/crud/food-provider-crud.js"],"names":["makeString","length","text","possible","i","charAt","Math","floor","random","Crud","create","input","description","name","avatar","FoodProviderSchema","then","provider","catch","error","update","id","where","rowsUpdate","updatedProvider","console","log"],"mappings":";;;;;;AAAA;;;;;;AAEA,SAASA,UAAT,CAAoBC,MAApB,EAA4B;AACxB,QAAIC,OAAO,EAAX;AACA,QAAIC,WAAW,gEAAf;;AAEA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,MAApB,EAA4BG,GAA5B,EACEF,QAAQC,SAASE,MAAT,CAAgBC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgBL,SAASF,MAApC,CAAhB,CAAR;;AAEF,WAAOC,IAAP;AACD;;AAEH,MAAMO,IAAN,CAAW;AACP,UAAMC,MAAN,CAAaC,KAAb,EAAoB;AAChBA,cAAMC,WAAN,GAAoBZ,WAAW,EAAX,CAApB;AACAW,cAAME,IAAN,GAAab,WAAW,EAAX,CAAb;AACAW,cAAMG,MAAN,GAAed,WAAW,EAAX,CAAf;AACA,eAAO,MAAMe,6BAAmBL,MAAnB,CAA0BC,KAA1B,EAAiCK,IAAjC,CAAuCC,QAAD,IAAc;AAC7D,mBAAOA,QAAP;AACH,SAFY,EAEVC,KAFU,CAEJC,SAAS;AACd,mBAAOA,KAAP;AACH,SAJY,CAAb;AAKH;AACD,UAAMC,MAAN,CAAaT,KAAb,EAAoBU,EAApB,EAAwB;AACpB,eAAO,MAAMN,6BAAmBK,MAAnB,CAA0BT,KAA1B,EAAiC;AAC1CW,mBAAO;AACHD,oBAAIA;AADD;AADmC,SAAjC,EAIVL,IAJU,CAIL,CAACO,UAAD,EAAYC,eAAZ,KAAgC;AACpCC,oBAAQC,GAAR,CAAYF,eAAZ;AACA,mBAAOA,eAAP;AACH,SAPY,EAOVN,KAPU,CAOJC,SAAS;AACd,mBAAOA,KAAP;AACH,SATY,CAAb;AAUH;AAtBM;;kBA0BI,IAAIV,IAAJ,E","file":"food-provider-crud.js","sourcesContent":["import FoodProviderSchema from '../FoodProviderSchema'\n\nfunction makeString(length) {\n    var text = \"\";\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  \n    for (var i = 0; i < length; i++)\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n  \n    return text;\n  }\n    \nclass Crud {\n    async create(input) {\n        input.description = makeString(20);\n        input.name = makeString(10);\n        input.avatar = makeString(35);\n        return await FoodProviderSchema.create(input).then((provider) => {\n            return provider;\n        }).catch(error => {\n            return error;\n        });\n    }\n    async update(input, id) {\n        return await FoodProviderSchema.update(input, {\n            where: {\n                id: id\n            }\n        }).then((rowsUpdate,updatedProvider) => {\n            console.log(updatedProvider)\n            return updatedProvider;\n        }).catch(error => {\n            return error;\n        });\n    }\n}\n\n\nexport default new Crud();"]}