{"version":3,"sources":["../../../src/graphql/resolvers/order.js"],"names":["Order","constructor","id","source","schema","date","provider","FoodProvider","provider_id","creator","User","creatorId","entries","ret","getEntries","cacheKey","ids","cacheService","get","length","OrderEntrySchema","findAll","where","order_id","raw","attributes","set","i","entry","OrderEntry","push","createdAt","updatedAt"],"mappings":";;;;;;AAAA;;;;AACA;;AAGA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AACA,MAAMA,KAAN,CAAY;;AAERC,gBAAYC,EAAZ,EAAgB;AACZ,eAAO,CAAC,YAAY;AAChB,iBAAKA,EAAL,GAAUA,EAAV;AACA,iBAAKC,MAAL,GAAc,MAAM,oBAASC,qBAAT,EAAiBF,EAAjB,CAApB;AACA,mBAAO,IAAP,CAHgB,CAGH;AAChB,SAJM,GAAP;AAKH;AACDA,SAAK;AACD,eAAO,KAAKC,MAAL,CAAYD,EAAnB;AACH;;AAEDG,WAAO;AACH,eAAO,KAAKF,MAAL,CAAYE,IAAnB;AACH;;AAED,UAAMC,QAAN,GAAiB;AACb,eAAO,MAAM,IAAIC,kBAAJ,CAAiB,KAAKJ,MAAL,CAAYK,WAA7B,CAAb;AACH;AACD,UAAMC,OAAN,GAAgB;AACZ,eAAO,MAAM,IAAIC,cAAJ,CAAS,KAAKP,MAAL,CAAYQ,SAArB,CAAb;AACH;AACD,UAAMC,OAAN,GAAgB;AACZ,YAAIC,MAAM,MAAM,KAAKC,UAAL,CAAgB,KAAKX,MAAL,CAAYD,EAA5B,CAAhB;AACA,eAAOW,GAAP;AACH;AACD,UAAMC,UAAN,CAAiBZ,EAAjB,EAAqB;AACjB,cAAMa,WAAY,cAAab,EAAG,EAAlC;AACA,YAAIc,MAAM,MAAMC,uBAAaC,GAAb,CAAiBH,QAAjB,CAAhB;AACA,YAAIH,UAAU,EAAd;AACA,YAAII,OAAO,IAAP,IAAeA,IAAIG,MAAJ,IAAc,CAAjC,EAAoC;AAChCH,kBAAM,MAAMI,2BAAiBC,OAAjB,CAAyB;AACjCC,uBAAO;AACHC,8BAAUrB;AADP,iBAD0B;AAIjCsB,qBAAK,IAJ4B;AAKjCC,4BAAY,CAAC,IAAD;AALqB,aAAzB,CAAZ;AAOAR,mCAAaS,GAAb,CAAiBX,QAAjB,EAA2BC,GAA3B;AACH;AACD,YAAIA,OAAO,IAAX,EAAiB;AACb,iBAAK,IAAIW,IAAI,CAAb,EAAgBA,IAAIX,IAAIG,MAAxB,EAAgC,EAAEQ,CAAlC,EAAqC;AACjC,oBAAIC,QAAQ,MAAM,IAAIC,sBAAJ,CAAeb,IAAIW,CAAJ,EAAOzB,EAAtB,CAAlB;AACAU,wBAAQkB,IAAR,CAAaF,KAAb;AACH;AACJ;AACD,eAAOhB,OAAP;AACH;;AAEDmB,gBAAY;AACR,eAAO,KAAK5B,MAAL,CAAY4B,SAAnB;AACH;;AAEDC,gBAAY;AACR,eAAO,KAAK7B,MAAL,CAAY6B,SAAnB;AACH;;AAxDO;kBA4DGhC,K","file":"order.js","sourcesContent":["import schema from '../../database/schemes/OrderSchema';\nimport {\n    findByPK\n} from '../../database/schemes/crud/crud';\nimport OrderEntrySchema from '../../database/schemes/OrderEntrySchema';\nimport FoodProvider from './provider'\nimport OrderEntry from './orderEntries'\nimport User from './user';\nimport cacheService from '../../cache/cache-service'\nclass Order {\n\n    constructor(id) {\n        return (async () => {\n            this.id = id;\n            this.source = await findByPK(schema, id);\n            return this; // when done\n        })();\n    }\n    id() {\n        return this.source.id;\n    }\n\n    date() {\n        return this.source.date;\n    }\n\n    async provider() {\n        return await new FoodProvider(this.source.provider_id);\n    }\n    async creator() {\n        return await new User(this.source.creatorId);\n    }\n    async entries() {\n        let ret = await this.getEntries(this.source.id);\n        return ret;\n    }\n    async getEntries(id) {\n        const cacheKey = `entries_of_${id}`;\n        let ids = await cacheService.get(cacheKey);\n        let entries = [];\n        if (ids == null || ids.length == 0) {\n            ids = await OrderEntrySchema.findAll({\n                where: {\n                    order_id: id\n                },\n                raw: true,\n                attributes: ['id']\n            })\n            cacheService.set(cacheKey, ids);\n        }\n        if (ids != null) {\n            for (var i = 0; i < ids.length; ++i) {\n                let entry = await new OrderEntry(ids[i].id);\n                entries.push(entry);\n            }\n        }\n        return entries;\n    }\n\n    createdAt() {\n        return this.source.createdAt;\n    }\n\n    updatedAt() {\n        return this.source.updatedAt;\n    }\n\n\n}\nexport default Order"]}