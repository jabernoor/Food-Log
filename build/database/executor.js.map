{"version":3,"sources":["../../src/database/executor.js"],"names":["execute","procName","params","Promise","resolve","reject","query","buildQuery","normalizedParams","normalizeParams","database","then","rows","release","catch","error","concat","item","slice","normalized","push"],"mappings":";;;;;;;AAAA;;;;;;AAEO,MAAMA,4BAAU,CAACC,QAAD,EAAWC,MAAX,KAAsB;AACzC,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,cAAMC,QAAQC,WAAWN,QAAX,EAAqBC,MAArB,CAAd;AACA,cAAMM,mBAAmBC,gBAAgBP,MAAhB,CAAzB;AACAQ,2BAASJ,KAAT,CAAeA,KAAf,EAAsBE,gBAAtB,EAAwCG,IAAxC,CAA6CC,QAAQ;AACjDR,oBAAQQ,IAAR;AACH,SAFD,EAEGD,IAFH,CAEQC,QAAQF,mBAASG,OAAT,EAFhB,EAEoCC,KAFpC,CAE0CC,SAASV,OAAOU,KAAP,CAFnD;AAGH,KANM,CAAP;AAOH,CARM;;AAUP,MAAMR,aAAa,CAACN,QAAD,EAAWC,MAAX,KAAsB;AACrC,QAAII,QAAQ,EAAZ;AACAA,YAAQA,MAAMU,MAAN,CAAa,OAAb,EAAsBA,MAAtB,CAA6Bf,QAA7B,EAAuCe,MAAvC,CAA8C,IAA9C,CAAR;AACA,QAAIC,IAAJ;AACA,SAAKA,IAAL,IAAaf,MAAb,EAAqB;AACjBI,gBAAQA,MAAMU,MAAN,CAAa,GAAb,EAAkBA,MAAlB,CAAyB,GAAzB,CAAR;AACH;AACDV,YAAQA,MAAMY,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAhB,CAAR;AACA,WAAOZ,MAAMU,MAAN,CAAa,GAAb,CAAP;AACH,CATD;;AAWA,MAAMP,kBAAmBP,MAAD,IAAY;AAChC,QAAIiB,aAAa,EAAjB;AACA,SAAK,IAAIF,IAAT,IAAiBf,MAAjB,EAAyB;AACrBiB,mBAAWC,IAAX,CAAgBlB,OAAOe,IAAP,CAAhB;AACH;AACD,WAAOE,UAAP;AACH,CAND;kBAOenB,O","file":"executor.js","sourcesContent":["import database from './database'\n\nexport const execute = (procName, params) => {\n    return new Promise((resolve, reject) => {\n        const query = buildQuery(procName, params);\n        const normalizedParams = normalizeParams(params);\n        database.query(query, normalizedParams).then(rows => {\n            resolve(rows);\n        }).then(rows => database.release()).catch(error => reject(error))\n    });\n};\n\nconst buildQuery = (procName, params) => {\n    let query = \"\";\n    query = query.concat('CALL ').concat(procName).concat(' (');\n    let item;\n    for (item in params) {\n        query = query.concat('?').concat(',');\n    }\n    query = query.slice(0, -1);\n    return query.concat(')');\n};\n\nconst normalizeParams = (params) => {\n    let normalized = [];\n    for (let item in params) {\n        normalized.push(params[item]);\n    }\n    return normalized;\n};\nexport default execute"]}